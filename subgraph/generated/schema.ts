// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Challenge extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Challenge entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Challenge must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Challenge", id.toString(), this);
    }
  }

  static load(id: string): Challenge | null {
    return changetype<Challenge | null>(store.get("Challenge", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get createdTimestamp(): BigInt {
    let value = this.get("createdTimestamp");
    return value!.toBigInt();
  }

  set createdTimestamp(value: BigInt) {
    this.set("createdTimestamp", Value.fromBigInt(value));
  }

  get creator(): string {
    let value = this.get("creator");
    return value!.toString();
  }

  set creator(value: string) {
    this.set("creator", Value.fromString(value));
  }

  get duration(): BigInt {
    let value = this.get("duration");
    return value!.toBigInt();
  }

  set duration(value: BigInt) {
    this.set("duration", Value.fromBigInt(value));
  }

  get hashtag(): string {
    let value = this.get("hashtag");
    return value!.toString();
  }

  set hashtag(value: string) {
    this.set("hashtag", Value.fromString(value));
  }

  get handle(): string {
    let value = this.get("handle");
    return value!.toString();
  }

  set handle(value: string) {
    this.set("handle", Value.fromString(value));
  }

  get description(): string {
    let value = this.get("description");
    return value!.toString();
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get prize(): BigInt {
    let value = this.get("prize");
    return value!.toBigInt();
  }

  set prize(value: BigInt) {
    this.set("prize", Value.fromBigInt(value));
  }

  get deadline(): BigInt {
    let value = this.get("deadline");
    return value!.toBigInt();
  }

  set deadline(value: BigInt) {
    this.set("deadline", Value.fromBigInt(value));
  }

  get isFinalized(): boolean {
    let value = this.get("isFinalized");
    return value!.toBoolean();
  }

  set isFinalized(value: boolean) {
    this.set("isFinalized", Value.fromBoolean(value));
  }

  get participantAddresses(): Array<string> {
    let value = this.get("participantAddresses");
    return value!.toStringArray();
  }

  set participantAddresses(value: Array<string>) {
    this.set("participantAddresses", Value.fromStringArray(value));
  }

  get participantsNumber(): i32 {
    let value = this.get("participantsNumber");
    return value!.toI32();
  }

  set participantsNumber(value: i32) {
    this.set("participantsNumber", Value.fromI32(value));
  }
}

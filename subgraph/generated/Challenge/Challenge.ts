// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class Finalized extends ethereum.Event {
  get params(): Finalized__Params {
    return new Finalized__Params(this);
  }
}

export class Finalized__Params {
  _event: Finalized;

  constructor(event: Finalized) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ParamsSet extends ethereum.Event {
  get params(): ParamsSet__Params {
    return new ParamsSet__Params(this);
  }
}

export class ParamsSet__Params {
  _event: ParamsSet;

  constructor(event: ParamsSet) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get params(): ParamsSetParamsStruct {
    return changetype<ParamsSetParamsStruct>(
      this._event.parameters[1].value.toTuple()
    );
  }
}

export class ParamsSetParamsStruct extends ethereum.Tuple {
  get createdTimestamp(): BigInt {
    return this[0].toBigInt();
  }

  get creator(): Address {
    return this[1].toAddress();
  }

  get duration(): BigInt {
    return this[2].toBigInt();
  }

  get hashtag(): string {
    return this[3].toString();
  }

  get handle(): string {
    return this[4].toString();
  }

  get description(): string {
    return this[5].toString();
  }

  get prize(): BigInt {
    return this[6].toBigInt();
  }

  get deadline(): BigInt {
    return this[7].toBigInt();
  }

  get isFinalized(): boolean {
    return this[8].toBoolean();
  }

  get finalizedTimestamp(): BigInt {
    return this[9].toBigInt();
  }

  get winnersNumber(): BigInt {
    return this[10].toBigInt();
  }
}

export class ParticipantSet extends ethereum.Event {
  get params(): ParticipantSet__Params {
    return new ParticipantSet__Params(this);
  }
}

export class ParticipantSet__Params {
  _event: ParticipantSet;

  constructor(event: ParticipantSet) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get participantAccountAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get participant(): ParticipantSetParticipantStruct {
    return changetype<ParticipantSetParticipantStruct>(
      this._event.parameters[2].value.toTuple()
    );
  }
}

export class ParticipantSetParticipantStruct extends ethereum.Tuple {
  get addedTimestamp(): BigInt {
    return this[0].toBigInt();
  }

  get accountAddress(): Address {
    return this[1].toAddress();
  }

  get handle(): string {
    return this[2].toString();
  }

  get isChallengeCompleted(): boolean {
    return this[3].toBoolean();
  }

  get isPrizeReceived(): boolean {
    return this[4].toBoolean();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Challenge__getParamsResultValue0Struct extends ethereum.Tuple {
  get createdTimestamp(): BigInt {
    return this[0].toBigInt();
  }

  get creator(): Address {
    return this[1].toAddress();
  }

  get duration(): BigInt {
    return this[2].toBigInt();
  }

  get hashtag(): string {
    return this[3].toString();
  }

  get handle(): string {
    return this[4].toString();
  }

  get description(): string {
    return this[5].toString();
  }

  get prize(): BigInt {
    return this[6].toBigInt();
  }

  get deadline(): BigInt {
    return this[7].toBigInt();
  }

  get isFinalized(): boolean {
    return this[8].toBoolean();
  }

  get finalizedTimestamp(): BigInt {
    return this[9].toBigInt();
  }

  get winnersNumber(): BigInt {
    return this[10].toBigInt();
  }
}

export class Challenge__getParticipantsResultValue0Struct extends ethereum.Tuple {
  get addedTimestamp(): BigInt {
    return this[0].toBigInt();
  }

  get accountAddress(): Address {
    return this[1].toAddress();
  }

  get handle(): string {
    return this[2].toString();
  }

  get isChallengeCompleted(): boolean {
    return this[3].toBoolean();
  }

  get isPrizeReceived(): boolean {
    return this[4].toBoolean();
  }
}

export class Challenge extends ethereum.SmartContract {
  static bind(address: Address): Challenge {
    return new Challenge("Challenge", address);
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCurrentCounter(): BigInt {
    let result = super.call(
      "getCurrentCounter",
      "getCurrentCounter():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getCurrentCounter(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentCounter",
      "getCurrentCounter():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getParams(tokenId: BigInt): Challenge__getParamsResultValue0Struct {
    let result = super.call(
      "getParams",
      "getParams(uint256):((uint256,address,uint256,string,string,string,uint256,uint256,bool,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return changetype<Challenge__getParamsResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getParams(
    tokenId: BigInt
  ): ethereum.CallResult<Challenge__getParamsResultValue0Struct> {
    let result = super.tryCall(
      "getParams",
      "getParams(uint256):((uint256,address,uint256,string,string,string,uint256,uint256,bool,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Challenge__getParamsResultValue0Struct>(value[0].toTuple())
    );
  }

  getParticipants(
    tokenId: BigInt
  ): Array<Challenge__getParticipantsResultValue0Struct> {
    let result = super.call(
      "getParticipants",
      "getParticipants(uint256):((uint256,address,string,bool,bool)[])",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return result[0].toTupleArray<
      Challenge__getParticipantsResultValue0Struct
    >();
  }

  try_getParticipants(
    tokenId: BigInt
  ): ethereum.CallResult<Array<Challenge__getParticipantsResultValue0Struct>> {
    let result = super.tryCall(
      "getParticipants",
      "getParticipants(uint256):((uint256,address,string,bool,bool)[])",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Challenge__getParticipantsResultValue0Struct>()
    );
  }

  getVerifierAddress(): Address {
    let result = super.call(
      "getVerifierAddress",
      "getVerifierAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getVerifierAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getVerifierAddress",
      "getVerifierAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isChallengeCompleted(tokenId: BigInt): boolean {
    let result = super.call(
      "isChallengeCompleted",
      "isChallengeCompleted(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return result[0].toBoolean();
  }

  try_isChallengeCompleted(tokenId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isChallengeCompleted",
      "isChallengeCompleted(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class CompleteCall extends ethereum.Call {
  get inputs(): CompleteCall__Inputs {
    return new CompleteCall__Inputs(this);
  }

  get outputs(): CompleteCall__Outputs {
    return new CompleteCall__Outputs(this);
  }
}

export class CompleteCall__Inputs {
  _call: CompleteCall;

  constructor(call: CompleteCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CompleteCall__Outputs {
  _call: CompleteCall;

  constructor(call: CompleteCall) {
    this._call = call;
  }
}

export class FinalizeCall extends ethereum.Call {
  get inputs(): FinalizeCall__Inputs {
    return new FinalizeCall__Inputs(this);
  }

  get outputs(): FinalizeCall__Outputs {
    return new FinalizeCall__Outputs(this);
  }
}

export class FinalizeCall__Inputs {
  _call: FinalizeCall;

  constructor(call: FinalizeCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class FinalizeCall__Outputs {
  _call: FinalizeCall;

  constructor(call: FinalizeCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get verifierAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class ParticipateCall extends ethereum.Call {
  get inputs(): ParticipateCall__Inputs {
    return new ParticipateCall__Inputs(this);
  }

  get outputs(): ParticipateCall__Outputs {
    return new ParticipateCall__Outputs(this);
  }
}

export class ParticipateCall__Inputs {
  _call: ParticipateCall;

  constructor(call: ParticipateCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get handle(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class ParticipateCall__Outputs {
  _call: ParticipateCall;

  constructor(call: ParticipateCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetVerifierAddressCall extends ethereum.Call {
  get inputs(): SetVerifierAddressCall__Inputs {
    return new SetVerifierAddressCall__Inputs(this);
  }

  get outputs(): SetVerifierAddressCall__Outputs {
    return new SetVerifierAddressCall__Outputs(this);
  }
}

export class SetVerifierAddressCall__Inputs {
  _call: SetVerifierAddressCall;

  constructor(call: SetVerifierAddressCall) {
    this._call = call;
  }

  get verifierAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetVerifierAddressCall__Outputs {
  _call: SetVerifierAddressCall;

  constructor(call: SetVerifierAddressCall) {
    this._call = call;
  }
}

export class StartCall extends ethereum.Call {
  get inputs(): StartCall__Inputs {
    return new StartCall__Inputs(this);
  }

  get outputs(): StartCall__Outputs {
    return new StartCall__Outputs(this);
  }
}

export class StartCall__Inputs {
  _call: StartCall;

  constructor(call: StartCall) {
    this._call = call;
  }

  get duration(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get hashtag(): string {
    return this._call.inputValues[1].value.toString();
  }

  get handle(): string {
    return this._call.inputValues[2].value.toString();
  }

  get description(): string {
    return this._call.inputValues[3].value.toString();
  }

  get prize(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class StartCall__Outputs {
  _call: StartCall;

  constructor(call: StartCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class VerifyCall extends ethereum.Call {
  get inputs(): VerifyCall__Inputs {
    return new VerifyCall__Inputs(this);
  }

  get outputs(): VerifyCall__Outputs {
    return new VerifyCall__Outputs(this);
  }
}

export class VerifyCall__Inputs {
  _call: VerifyCall;

  constructor(call: VerifyCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class VerifyCall__Outputs {
  _call: VerifyCall;

  constructor(call: VerifyCall) {
    this._call = call;
  }
}
